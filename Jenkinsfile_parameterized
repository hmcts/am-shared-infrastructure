#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

import groovy.json.JsonSlurper

//noinspection GroovyAssignabilityCheck
properties([
		parameters([
            string(name: 'PRODUCT_NAME', defaultValue: 'am', description: ''),
            choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod\nspreview', description: 'Environment where code should be build and deployed')
		]),
		[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '30']]
])

echo "Building AM Shared Infrastructure in environment '${params.ENVIRONMENT}'"

withParameterizedInfraPipeline(params.PRODUCT_NAME, params.ENVIRONMENT, 'sandbox', true) {
  after('checkout') {
    echo "AFTER CHECKOUT BLOCK"

    try {
        echo "QUERY API TO RETRIEVE PRs"

        // script {
        //   url = "https://api.github.com/repos/hmcts/am-shared-infrastructure/pulls"
        //   response = sh(script: "curl -s $url", returnStdout:true)
        //   echo $response
        // }

        def response = httpRequest "https://api.github.com/repos/hmcts/am-shared-infrastructure/pulls"
        def pullJsonObj = jsonSlurper.parseText(response)
        echo pullJsonObj


        // def response = httpRequest(
        //   consoleLogResponseBody: true,
        //   authentication: env.GIT_CREDENTIALS_ID,
        //   timeout: 10,
        //   url: "https://api.github.com/repos/hmcts/am-shared-infrastructure/pulls",
        //   validResponseCodes: '200'
        // )
        // environmentApprovals = steps.readYaml(text: response.content)

        // echo response.content

    } catch (err) {

    }

    // withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
      
    // }
  }
}

// slackChannel = '#am-param-builds'

// node {
//   env.PATH = "$env.PATH:/usr/local/bin"

//   stage('Checkout') {
//     deleteDir()
//     checkout scm
//   }

//   stage('Create shared infrastructure') {
//     sharedInfrastructurePipeline('am', params.ENVIRONMENT, 'sandbox')
//   }
// }